<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2024/09/02/hello-world/</url>
    <content><![CDATA[<h1 id="STM32F103C8T6"><a href="#STM32F103C8T6" class="headerlink" title="STM32F103C8T6"></a>STM32F103C8T6</h1><p><strong>FLASH:64KB，RAM:20KB</strong><br><strong>flash起始地址为0x08000000，大小为0x10000(16进制)—&gt;65536字节(10进制)—&gt;64KB</strong><br><strong>RAM起始地址为  0x20000000，大小为0x05000(16进制)—&gt;20480字节(10进制)—&gt;20KB</strong></p>
<span id="more"></span>

<hr>
<h1 id="STM32F103RCT6"><a href="#STM32F103RCT6" class="headerlink" title="STM32F103RCT6"></a>STM32F103RCT6</h1><p><strong>FLASH:256KB，SRAM：48KB</strong><br><strong>flash起始地址为0x08000000，大小为0x4000(16进制)—&gt;262144字节(10进制)—&gt;256KB</strong><br><strong>RAM起始地址为  0x20000000，大小为0xC000(16进制)—&gt;49125字节 (10进制)—&gt;48KB</strong></p>
<hr>
<h1 id="STM32F103ZET6"><a href="#STM32F103ZET6" class="headerlink" title="STM32F103ZET6"></a>STM32F103ZET6</h1><p><strong>FLASH:512KB，SRAM：64KB；</strong><br><strong>flash起始地址为0x08000000，大小为0x80000(16进制)—&gt;524288字节(10进制)—&gt;512KB</strong><br><strong>RAM起始地址为  0x20000000，大小为0x10000(16进制)—&gt;65536字节 (10进制)—&gt;64KB</strong></p>
<hr>
<h1 id="STM32F103VET6"><a href="#STM32F103VET6" class="headerlink" title="STM32F103VET6"></a>STM32F103VET6</h1><p><strong>FLASH:512KB，SRAM：64KB；</strong><br><strong>flash起始地址为0x08000000，大小为0x80000(16进制)—&gt;524288字节(10进制)—&gt;512KB</strong><br><strong>RAM起始地址为  0x20000000，大小为0x10000(16进制)—&gt;65536字节 (10进制)—&gt;64KB</strong></p>
<hr>
<p>#FreeRTOS配置项<br><strong><a href="https://blog.csdn.net/ZCShouCSDN/article/details/54694511">链接</a></strong> </p>
<hr>
<h1 id="占用RAM和flash大小计算"><a href="#占用RAM和flash大小计算" class="headerlink" title="占用RAM和flash大小计算"></a>占用RAM和flash大小计算</h1><p><strong>占用的FLASH &#x3D; Code + RO-data + RW-data</strong><br><strong>占用的 SRAM &#x3D; RW-data + ZI-data</strong></p>
<hr>
<h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><pre><code>**ram中包含了如下几个部分：**  
**1、data : 存放初始化为非 0 值的全局变量**  
**2、bss : 存放未初始化或者是初始化为 0 的全局变量**  
**3、堆 (heap) : 由 malloc 申请，由 free 释放**  
**4、栈 (Stack) : 存放局部变量和函数调用时的返回地址**  
</code></pre>
<p><strong>先给变量分配空间，然后分配堆栈大小</strong>  </p>
<hr>
<p>#SystemInit()函数作用<br><strong>复位并配置向量表</strong><br><strong>设置系统时钟为外部高速时钟</strong></p>
<h1 id="正点原子"><a href="#正点原子" class="headerlink" title="正点原子"></a>正点原子</h1><p><strong>寄存器版：</strong><br>        Stm32_Clock_Init(u8 PLL)  ： 复位并配置向量表  设置系统时钟为外部高速时钟<br>        delay_init(72);			  ： 设置滴答定时器时钟和中断</p>
<p><strong>库函数版</strong><br>        void SystemInit (void)    ： 复位并配置向量表  设置系统时钟为外部高速时钟<br>        delay_init(); 			  ： 设置滴答定时器时钟和中断</p>
<h1 id="正点原子时钟源选择"><a href="#正点原子时钟源选择" class="headerlink" title="正点原子时钟源选择"></a>正点原子时钟源选择</h1><p><strong>Keil编写程序是默认的时钟为72Mhz，其实是这么来的：外部晶振(HSE)提供的8MHz（与电路板上的晶振的相关）通过PLLXTPRE分频器后，进入PLLSRC选择开关，进而通过PLLMUL锁相环进行倍频（x9）后，为系统提供72MHz的系统时钟（SYSCLK）。之后是AHB预分频器对时钟信号进行分频，然后为低速外设提供时钟。</strong></p>
<hr>
<p><img src="https://gqlblog-picture.oss-cn-beijing.aliyuncs.com/image-20240903105446252.png" alt="image-20240903105446252"></p>
]]></content>
  </entry>
  <entry>
    <title>生成文章</title>
    <url>/2024/09/03/%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="这是一个文章"><a href="#这是一个文章" class="headerlink" title="这是一个文章"></a>这是一个文章</h1><p><strong>这是内容</strong></p>
<span id="more"></span>

<p><img src="http://gitee.com/ZiXieGQL/blog-pictures/raw/master/img/image-20240903093932927.png" alt="image-20240903093932927"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/03/test/</url>
    <content><![CDATA[<h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><span id="more"></span>]]></content>
  </entry>
</search>
